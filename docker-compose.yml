services:
  api: &main_app
    build:
      context: .
      dockerfile: ./Dockerfile
    image: hui:${HUI_VERSION:-latest}
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rmq:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      HUI_HOST: 0.0.0.0
      HUI_DB_HOST: hui-db
      HUI_DB_PORT: 5432
      HUI_DB_USER: hui
      HUI_DB_PASS: hui
      HUI_DB_BASE: hui
      HUI_RABBIT_HOST: hui-rmq
      HUI_REDIS_HOST: hui-redis
      TESTKAFKA_KAFKA_BOOTSTRAP_SERVERS: '["hui-kafka:9092"]'

  taskiq-worker:
    <<: *main_app
    labels: []
    command:
      - taskiq
      - worker
      - hui.tkq:broker

  db:
    image: postgres:16.3-bullseye
    hostname: hui-db
    environment:
      POSTGRES_PASSWORD: "hui"
      POSTGRES_USER: "hui"
      POSTGRES_DB: "hui"
    volumes:
      - hui-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U hui
      interval: 2s
      timeout: 3s
      retries: 40

  migrator:
    image: hui:${HUI_VERSION:-latest}
    restart: "no"
    command: alembic upgrade head
    environment:
      HUI_DB_HOST: hui-db
      HUI_DB_PORT: 5432
      HUI_DB_USER: hui
      HUI_DB_PASS: hui
      HUI_DB_BASE: hui
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: bitnami/redis:6.2.5
    hostname: "hui-redis"
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50

  rmq:
    image: rabbitmq:3.9.16-alpine
    hostname: "hui-rmq"
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "/"
    healthcheck:
      test: rabbitmq-diagnostics check_running -q
      interval: 3s
      timeout: 3s
      retries: 50

  kafka:
    image: bitnami/kafka:3.7.1-debian-12-r0
    hostname: "hui-kafka"
    environment:
      KAFKA_CFG_NODE_ID: "0"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@hui-kafka:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    # Uncomment it to connect from localhost.
    # ports:
    #   - 9094:9094
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092
      interval: 1s
      timeout: 3s
      retries: 30



volumes:
  hui-db-data:
    name: hui-db-data
